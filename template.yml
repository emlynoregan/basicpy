AWSTemplateFormatVersion: 2010-09-09
Transform:
- AWS::Serverless-2016-10-31
- AWS::CodeStar
 
Parameters:
  ProjectId:
    Type: String
    Description: CodeStar projectId used to associate new resources to team members
  CodeDeployRole:
    Type: String
    Description: IAM role to allow AWS CodeDeploy to manage deployment of AWS Lambda functions
  Stage:
    Type: String
    Description: The name for a project pipeline stage, such as Staging or Prod, for which resources are provisioned and deployed.
    Default: 'dev'
 
Globals:
  Function:
    AutoPublishAlias: live
    DeploymentPreference:
      Enabled: true
      Type: Canary10Percent5Minutes
      Role: !Ref CodeDeployRole

Resources:
  DynamoDBTable:
    Type: AWS::DynamoDB::Table
    Properties: 
      TableName: chat
      AttributeDefinitions: 
        - AttributeName: pkey
          AttributeType: S
        - AttributeName: skey
          AttributeType: S
      KeySchema: 
        - AttributeName: pkey
          KeyType: HASH
        - AttributeName: skey
          KeyType: RANGE
      BillingMode: PAY_PER_REQUEST
      

  AppSyncAPI:
    Type: AWS::AppSync::GraphQLApi
    Properties:
      Name: !Join [ -, [ !Ref ProjectId, !Ref Stage ] ] # !Sub '${ProjectId}-${Stage}'
      AuthenticationType: AMAZON_COGNITO_USER_POOLS
      UserPoolConfig: 
        AwsRegion: us-east-1
        UserPoolId: us-east-1_HyhoVSR51
        DefaultAction: DENY

  AppSyncSchema:
    Type: AWS::AppSync::GraphQLSchema
    Properties:
      ApiId: !GetAtt [ AppSyncAPI, ApiId ]
      DefinitionS3Location: appsyncschema.txt

  # chatds:
  #   Type: AWS::AppSync::DataSource
  #   Properties:
  #     ApiId: !GetAtt [ AppSyncAPI, ApiId ]
  #     Name: chat_table
  #     Type: AMAZON_DYNAMODB
  #     DynamoDBConfig:
  #       AwsRegion: us-east-1
  #       TableName: chat
  #     ServiceRoleArn: !GetAtt [ Role, Arn ]

  # AppSyncResolverPeople:
  #   Type: AWS::AppSync::Resolver
  #   Properties:
  #     ApiId: !GetAtt [ AppSyncAPI, ApiId ]
  #     DataSourceName: !GetAtt [ chat_ds, Name ]
  #     TypeName: Query
  #     FieldName: people
  #     RequestMappingTemplate: >
  #       { 
  #         "version": "2017-02-28",
  #         "operation": "Scan",
  #         "select": "ALL_ATTRIBUTES",
  #         "limit": $util.defaultIfNull($ctx.args.limit, 20),
  #         "nextToken": $util.toJson($util.defaultIfNullOrEmpty($ctx.args.nextToken, null)),
  #       }
  #     ResponseMappingTemplate: >
  #       $util.toJson($context.result)

  LambdaExecutionRole:
    Description: Creating service role in IAM for AWS Lambda
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub 'CodeStar-${ProjectId}-Execution${Stage}'
      AssumeRolePolicyDocument:
        Statement:
        - Effect: Allow
          Principal:
            Service: [lambda.amazonaws.com]
          Action: sts:AssumeRole
      Path: /
      ManagedPolicyArns:
        - !Sub 'arn:${AWS::Partition}:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole'
      PermissionsBoundary: !Sub 'arn:${AWS::Partition}:iam::${AWS::AccountId}:policy/CodeStar_${ProjectId}_PermissionsBoundary'